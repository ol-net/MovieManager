<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		title="Available Downloads"  
		actionBarVisible="false"
		creationComplete="init();">
	
	<fx:Script>
		<![CDATA[
			import business.Download;
			import business.datahandler.VideoHandler;
			import business.renderer.VideosItemRenderer;
			
			import events.DownloadEvent;
			import events.VideosLoadedEvent;
			import events.OnProgressEvent;
			
			import mx.collections.XMLListCollection;
			import mx.events.ResizeEvent;
			
			private var videoHandler:VideoHandler;
			
			public function init():void
			{
				videoHandler = VideoHandler.getInstance();
				videoHandler.init();
				videoHandler.addEventListener(VideosLoadedEvent.VIDEOSLOADED, getVideos);
				
				this.addEventListener(ResizeEvent.RESIZE, onResizeView);
			}	
			
			public function getVideos(e:VideosLoadedEvent):void
			{
				background.visible = false;
				list.dataProvider = videoHandler.getVideosListCollection();
			}
			
			protected function checkOrientation():void
			{
				if(true){
					currentState = "landScapeView";
				}else{
					currentState = "portrait";
				}
			}
			
			protected function onResizeView(event:ResizeEvent):void
			{
				checkOrientation();
			}
			
			public function downloadVideo():void
			{
				background.visible = true;
				
				if(!list.selectedItem.inside)
				{
					var downLoader:Download = new Download();
					downLoader.addEventListener(DownloadEvent.DOWNLOAD_COMPLETE, downloadComplete);
					downLoader.addEventListener(OnProgressEvent.PROGRESS, onProgressEvent); 
					
					var newVideo:String = list.selectedItem.name+".mp4";
					
					var file:File = File.applicationStorageDirectory.resolvePath(newVideo);
					downLoader.download(list.selectedItem.url, file, newVideo, list.selectedItem.thumbnail);
				}
				else
				{
					NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
					
					this.navigator.pushView(Player, list.selectedItem.url);
				}
			}
			
			public function onProgressEvent(e:OnProgressEvent):void
			{
				loader.text = "downloading... " + e.percent+ " %";
			}
			
			public function downloadComplete(e:DownloadEvent):void
			{
				background.visible = false;
				//	trace("Download complete: ");
				//	trace("\t"+e.url);
				//	trace("->\t"+e.file.url);
			}
		]]>
	</fx:Script>
	
	<s:actionContent>
		
		<s:Button id="back_button" 
				  height="53"
				  width="60"
				  click="{this.navigator.popView()}">
			<s:icon>
				<s:MultiDPIBitmapSource source160dpi="assets/BackIcon40x40.png"
										source240dpi="assets/BackIcon64x64.png"
										source320dpi="assets/BackIcon88x88.png"/>
			</s:icon>
		</s:Button>
		
	</s:actionContent>
	
	<s:states>
		<s:State name="portrait"/>
		<s:State name="landScapeView"/>
	</s:states>
	
	<s:View backgroundColor="#F2F2F2">
		
		<s:List id="list" 
				itemRenderer="business.renderer.TestRenderer"
				width="100%" 
				height="{navigator.height}"
				change="downloadVideo()">
							<s:layout.portrait>
								<s:TileLayout orientation="rows"/>
							</s:layout.portrait>
							<s:layout.landScapeView>
								<s:TileLayout orientation="columns"/>
							</s:layout.landScapeView>
		</s:List>
		
		<s:View id="background" visible="true"
				backgroundColor="black"
				alpha="0.7"
				width="{navigator.width}" 
				height="{navigator.height}">
			
			<s:Group width="{navigator.width}" height="50">
				
				<s:BusyIndicator id="bi" width="70" height="70"
								 x="{navigator.width / 2 - 32}" 
								 y ="100"
								 symbolColor="white"/>
				
				<s:Label id="loader" color="white" 
						 x="{navigator.width / 2 - 70}" 
						 y ="190"/>
				
			</s:Group>
		</s:View>
	</s:View>
</s:View>